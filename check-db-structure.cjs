const Database = require('better-sqlite3');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new Database('/home/ubuntu/ProdBy/database.db');

console.log('üóÑÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Digital Hustlas\n');

try {
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
  const tables = db.prepare("SELECT name FROM sqlite_master WHERE type='table'").all();
  
  console.log('üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
  tables.forEach(table => {
    console.log(`  - ${table.name}`);
  });
  
  console.log('\n' + '='.repeat(50) + '\n');
  
  // –î–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  tables.forEach(table => {
    console.log(`üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã: ${table.name}`);
    console.log('-'.repeat(30));
    
    const columns = db.prepare(`PRAGMA table_info(${table.name})`).all();
    
    columns.forEach(col => {
      const nullable = col.notnull === 0 ? 'NULL' : 'NOT NULL';
      const pk = col.pk === 1 ? ' (PRIMARY KEY)' : '';
      const defaultVal = col.dflt_value ? ` DEFAULT ${col.dflt_value}` : '';
      
      console.log(`  ${col.name}: ${col.type} ${nullable}${defaultVal}${pk}`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const count = db.prepare(`SELECT COUNT(*) as count FROM ${table.name}`).get();
    console.log(`  üìà –ó–∞–ø–∏—Å–µ–π: ${count.count}`);
    
    console.log('\n');
  });
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
  const mainTables = ['Users', 'Teams', 'Scores'];
  
  mainTables.forEach(tableName => {
    if (tables.some(t => t.name === tableName)) {
      console.log(`üîç –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`);
      console.log('-'.repeat(30));
      
      const sample = db.prepare(`SELECT * FROM ${tableName} LIMIT 3`).all();
      if (sample.length > 0) {
        console.log(JSON.stringify(sample, null, 2));
      } else {
        console.log('  (—Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞)');
      }
      console.log('\n');
    }
  });
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
} finally {
  db.close();
}

console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
